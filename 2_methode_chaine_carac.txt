Fonction chaine de caract√®re natifs : 

#Met toute la chaine de caract√®re en MAJ
    "Bonjour".upper(
    >> 'BONJOUR'

#Met toute la chaine de caract√®re en minuscule
    "BONJOUR".lower()
    >> 'bonjour'

#Permet de mettre une majuscule au d√©but du PREMIER mot
    "bonjour tout le monde.".capitalize()
    >> 'Bonjour tout le monde.'

#Permet de mettre une majuscule au d√©but de CHAQUE MOT
    "bonjour tout le monde.".title()
    >> 'Bonjour Tout Le Monde.'

Remplacer des √©l√©ments : 
M√©thode .replace('elem_a_replacer', 'remplacer_par')

#Remplace une occurence par un autre dans une chaine de caract√®re (ici la partie du mot 'bonjour' (jour) √† √©t√© remplacer par (soir)
    "bonjour".replace("jour","soir")
    >> 'bonsoir'
    "bonjour bonjour".replace("jour","soir")
    >> 'bonsoir bonsoir'
    "bonjour bonjour".replace(" ","")
    >> 'bonjourbonjour'

#On peut tout mettre d'un coup en une seul ligne en rempla√ßant plusieurs choses √† la fois
    "bonjour bonjour".replace("jour","soir").replace(" ","")
    >> 'bonsoirbonsoir'


M√©thode .strip()  /  .rstrip()  /  .lstrip()

" bonjour ".strip()
>>'bonjour'
" bon   jour ".strip()
>>'bon   jour'

"  bonjour  ".strip( ujor)  #ici les lettre sp√©cifi√© vont √™tre v√©rifier de la droite vers la gauche et de la gauche vers la droite. 
>>'bon'                       #si une occurence est trouver il remplace d√®s lorsqu'une 
                            #occurence n'est plus indiqu√© dans la fonction .strip() celui ci s'arrete


.lstrip()permet de remplacer en analysant depuis la gauche de la chaine de caract√®re
"  bonjour  ".lstrip( ujor)
>>'bonjour  '     ici il a retir√© les espace de la gauche, "b" n'√©tant pas indiqu√© dans la fonction il s'arr√™te

.rstrip() permet de remplacer en analysant depuis la droite de la chaine de caract√®re
"  bonjour  ".rstrip( ujor)
>>'  bon'     ici il a retir√© les espace de la droite, "n" n'√©tant pas indiqu√© dans la fonction il s'arr√™te


S√©parer et Joindre
.split  / .join


"1, 2, 3, 4 ,5".split(", ")
>> [1, 2, 3, 4, 5]      #.split() renvoie une liste

>> ", ".join("1, 2, 3, 4 ,5".split(", "))
'1, 2, 3, 4, 5'         


"-".join(["1", "2", "3"])
'1-2-3'


La fonction .zfill() #Ne fonctionne que sur les chaines de caract√®re, donc attention √† bien convertir au besoin.
    "9".zfill(4)
    >>0009

for i in range(8,12345):
    print(str(i).zfill(8))
>>0008
>>0009
>>0010
>>0011

M√©thode 'is'... #permet de verifier ce que contient une chaine de caract√®re

"bonjour".islower()
True
"Bonjour".islower()
False
"bonjour tout le monde".istitle()
False
"Bonjour Tout Le Monde".istitle()
True
"50".isdigit()
True
"50 cinquante".isdigit()
False


Compter les occurences 
"Bonjour le jour".count("jour")
>>2
"Bonjour le jour".count(" jour")
>>1

Trouver une chaine avec .find() / r.find() et .index()

"Bonjour le jour".find("jour")                                                                                                               B - o - n - j - o - u - r
>>3     #Cela retourne 3 car le premier caract√®re ou commence le mot jour est le 4eme caract√®re // en python les index commence par 0 , donc 0 - 1 - 2 - 3 - 4 - 5 - 6

"Bonjour le jour".index("jour")                                                                                                               
>>3

"Bonjour le jour".find("soir")  #Si avec la methode .find() aucune chaine de caract√®re n'est trouver, cela remonte -1
>>-1
"Bonjour le jour".index("soir") #Si avec la methode .index() aucune chaine de caract√®re n'est trouver, cela remonte une erreur
>>ERREUR

"Bonjour le jour".rfing("jour")                         B - o - n - j - o - u - r -   - l - e -    - j  - o  - u  - r
>>11                                                    0 - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 - 11 - 12 - 13 - 14


Chercher au d√©but et √† la fin :  endswith() / startswith()
"image.png".endswith(".png")
True
"image.png".endswith(".jpg")
False
"image.png".startswith("image")
True
"image.png".startswith("video")
False

DAUTRE METHODE :
üí° Pour afficher l'aide d'une m√©thode, vous pouvez utiliser la fonction help (par exemple help(str.center) pour afficher l'aide de la m√©thode center).

Pour trier une liste, on utilise la m√©thode .sort ou la fonction sorted().

capitalize() Converti le premier caract√®re de la cha√Æne en majuscule
casefold() Converti la phrase en minuscule
center() Retourne une cha√Æne de caract√®res centr√©e
count() Retourne le nombre de fois que la cha√Æne sp√©cifi√©e est trouv√©e
encode() Retourne une version encod√©e de la cha√Æne
endswith() Retourne True si la cha√Æne se termine par la valeur sp√©cifi√©e
expandtabs() Change la taille des tabulations de la cha√Æne
find() Cherche dans la cha√Æne de caract√®re la valeur sp√©cifi√©e et retourne l'index correspondant
format() Permet de formater une cha√Æne de caract√®res
index() Cherche dans la cha√Æne de caract√®re la valeur sp√©cifi√©e et retourne l'index correspondant
isalnum() Retourne True si tous les caract√®res dans la cha√Æne sont de type alphanum√©riques
isalpha() Retourne True si tous les caract√®res dans la cha√Æne sont des lettres de l'alphabet
isdecimal() Retourne True si tous les caract√®res dans la cha√Æne sont de type d√©cimal
isdigit() Retourne True si tous les caract√®res dans la cha√Æne sont des nombres
isidentifier() Retourne True si la cha√Æne est un identifiant (caract√®res alphanum√©riques et tiret du bas)
islower() Retourne True si tous les caract√®res sont en minuscule
isnumeric() Retourne True si tous les caract√®res sont num√©riques
isprintable() Retourne True si tous les caract√®res sont imprimables
isspace() Retourne True si tous les caract√®res sont des espaces
istitle() Retourne True si la premi√®re lettre de chaque mot est en majuscule
isupper() Retourne True si tous les caract√®res sont en majuscule
join() Joins avec le caract√®re sp√©cifi√© tous les √©l√©ments d'un it√©rable pass√© en argument
ljust() Retourne une version justifi√©e par la gauche de la cha√Æne
lower() Converti la cha√Æne en minuscule
lstrip() Supprime tous les caract√®res pass√©s individuellement en partant de la gauche de la cha√Æne
maketrans() Retourne une table de mapping √† utiliser avec la m√©thode translate
partition() Retourne un tuple compos√© de trois √©l√©ments
replace() Remplace un √©l√©ment de la cha√Æne par un autre
rfind() Cherche dans la cha√Æne de caract√®re la valeur sp√©cifi√©e et retourne l'index correspondant (en partant de la droite)
rindex() Cherche dans la cha√Æne de caract√®re la valeur sp√©cifi√©e et retourne l'index correspondant (en partant de la droite)
rjust() Retourne une version justifi√©e par la droite de la cha√Æne
rpartition() Retourne un tuple compos√© de trois √©l√©ment
rsplit() S√©pare la cha√Æne de caract√®res sur les caract√®res pass√©s en argument et retourne une liste
rstrip() Supprime tous les caract√®res pass√©s individuellement en partant de la droite de la cha√Æne
split() S√©pare la cha√Æne de caract√®res sur les caract√®res pass√©s en argument et retourne une liste
splitlines() S√©pare la cha√Æne de caract√®res sur les retours √† la ligne et retourne une liste
startswith() Retourne True si la cha√Æne commence par la valeur sp√©cifi√©e
strip() Supprime les caract√®res sp√©cifi√©s du d√©but et de la fin de la cha√Æne
swapcase() Change la casse (les majuscules deviennent minuscules et vice-versa)
title() Converti la premi√®re lettre de chaque mot en majuscule
translate() Retourne une cha√Æne traduite (avec une table de mapping)
upper() Converti une cha√Æne en majuscule
zfill() Rempli la cha√Æne sp√©cifi√©e avec des 0 (de la longueur indiqu√©e en argument)